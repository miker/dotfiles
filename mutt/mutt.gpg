set pgp_decode_command="/usr/bin/gpg  --charset utf-8   %?p?--passphrase-fd 0? --no-verbose --quiet  --batch  --output - %f"

# verify a pgp/mime signature
set pgp_verify_command="/usr/bin/gpg   --no-verbose --quiet  --batch  --output - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="/usr/bin/gpg   --passphrase-fd 0 --no-verbose --quiet  --batch  --output - %f"

# create a pgp/mime signed attachment
# set pgp_sign_command="/usr/bin/gpg-2comp --comment '' --no-verbose --batch  --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_sign_command="/usr/bin/gpg    --no-verbose --batch --quiet   --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
# set pgp_clearsign_command="/usr/bin/gpg-2comp --comment ''  --no-verbose --batch  --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"
set pgp_clearsign_command="/usr/bin/gpg   --charset utf-8 --no-verbose --batch --quiet   --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
# set pgp_encrypt_only_command="pgpewrap gpg-2comp  -v --batch  --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_only_command="pgpewrap /usr/bin/gpg  --charset utf-8    --batch  --quiet  --no-verbose --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
# set pgp_encrypt_sign_command="pgpewrap gpg-2comp  --passphrase-fd 0 -v --batch  --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_sign_command="pgpewrap /usr/bin/gpg  --charset utf-8 --passphrase-fd 0  --batch --quiet  --no-verbose  --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="/usr/bin/gpg  --no-verbose --import -v %f"

# export a key from the public key ring
set pgp_export_command="/usr/bin/gpg   --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="/usr/bin/gpg   --verbose --batch  --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="/usr/bin/gpg   --no-verbose --batch --quiet   --with-colons --list-keys %r"

# read in the secret key ring
set pgp_list_secring_command="/usr/bin/gpg   --no-verbose --batch --quiet   --with-colons --list-secret-keys %r"
# fetch keys
# set pgp_getkeys_command="pkspxycwrap %r"

# pattern for good signature - may need to be adapted to locale!

set pgp_good_sign="^gpg: Good signature from"

# OK, here's a version which uses gnupg's message catalog:
# set pgp_good_sign="`gettext -d gnupg -s 'Good signature from "' | tr -d '"'`"
#
#
# PGP and S/MIME:
#

unset fcc_clear     # encrypt Fcc of PGP encrypted messages?
unset crypt_autosign    # pgp/smime sign every outgoing mail. (send-hook?)
unset crypt_autoencrypt # pgp/smime encrypt every outgoing mail. (send-hook?)
set crypt_autopgp   # pgp encryption/sign of messages
set crypt_autosmime # S/MIME encrypt/sign of messages
set crypt_replyencrypt  # Encrypt replies on encrypted mail
set crypt_replysign # Sign replies on signed mail
set crypt_replysignencrypted    # Sign replies on encrypted mail
set crypt_timestamp # include timestamp in pgp/smime output (antispoof)
set crypt_verify_sig=yes    # ask whether I want to check a pgp signature


#
# PGP:
#

set pgp_check_exit  # check return value of PGP process
set pgp_create_traditional=no   # Use old-style PGP? (don't do it!)
set pgp_ignore_subkeys  # On OpenPGP keys only show the main key, not the sub.
unset pgp_long_ids  # display 64bit PGP key-ids (don't change this!)
unset pgp_retainable_sigs   # disable retainable signatures.
set pgp_show_unusable   # show unusable PGP keys in menu
set pgp_strict_enc  # allway use QP enc. with PGP.
set pgp_timeout=7200    # forget PGP passphrase after 7200 seconds (=2 hours)
